DDistinguishedNameChooser.CountryCodeTwoChars.message     = 国家代码必须是两个字符长。
DDistinguishedNameChooser.ValueReqAtLeastOneField.message = 至少需要一个字段的值。
DDistinguishedNameChooser.jbCancel.text                   = 取消
DDistinguishedNameChooser.jbDefault.mnemonic              = D
DDistinguishedNameChooser.jbDefault.text                  = 默认 DN
DDistinguishedNameChooser.jbDefault.tooltip               = 从偏好设置中设置为默认名称
DDistinguishedNameChooser.jbOK.text                       = 确定
DDistinguishedNameChooser.jbReset.mnemonic                = R
DDistinguishedNameChooser.jbReset.text                    = 重置
DDistinguishedNameChooser.jbReset.tooltip                 = 重置为原始值

DKeyIdentifierChooser.jbCancel.text           = 取消
DKeyIdentifierChooser.jbOK.text               = 确定
DKeyIdentifierChooser.jlGenerationMethod.text = 生成方法：
DKeyIdentifierChooser.jrb160BitHash.text      = 160位哈希
DKeyIdentifierChooser.jrb160BitHash.tooltip   = 公钥的 SHA-1 哈希 - 详见 RFC 3280
DKeyIdentifierChooser.jrb64BitHash.text       = 64位哈希
DKeyIdentifierChooser.jrb64BitHash.tooltip    = 公钥的部分 SHA-1 哈希 - 详见 RFC 3280

DProviderInfo.AliasesNode.text                         = 别名
DProviderInfo.AttributeNode.text                       = {0} = {1}
DProviderInfo.AttributesNode.text                      = 属性
DProviderInfo.ProviderNode.text                        = {0} v{1}
DProviderInfo.Service.AlgorithmParameterGenerator.text = 算法参数生成器
DProviderInfo.Service.AlgorithmParameters.text         = 算法参数
DProviderInfo.Service.CertPathBuilder.text             = 证书路径构建器
DProviderInfo.Service.CertPathValidator.text           = 证书路径验证器
DProviderInfo.Service.CertStore.text                   = 证书存储
DProviderInfo.Service.CertificateFactory.text          = 证书工厂
DProviderInfo.Service.Cipher.text                      = 加密算法
DProviderInfo.Service.Configuration.text               = 配置
DProviderInfo.Service.GssApiMechanism.text             = GSS API 机制
DProviderInfo.Service.KeyAgreement.text                = 密钥协议
DProviderInfo.Service.KeyFactory.text                  = 密钥工厂
DProviderInfo.Service.KeyGenerator.text                = 密钥生成器
DProviderInfo.Service.KeyInfoFactory.text              = 密钥信息工厂
DProviderInfo.Service.KeyManagerFactory.text           = 密钥管理器工厂
DProviderInfo.Service.KeyPairGenerator.text            = 密钥对生成器
DProviderInfo.Service.KeyStore.text                    = 密钥存储
DProviderInfo.Service.Mac.text                         = MAC
DProviderInfo.Service.MessageDigest.text               = 消息摘要
DProviderInfo.Service.Policy.text                      = 策略
DProviderInfo.Service.SSLContext.text                  = TLS 上下文
DProviderInfo.Service.SaslClientFactory.text           = SASL 客户端工厂
DProviderInfo.Service.SaslServerFactory.text           = SASL 服务器工厂
DProviderInfo.Service.SecretKeyFactory.text            = 秘密密钥工厂
DProviderInfo.Service.SecureRandom.text                = 安全随机
DProviderInfo.Service.Signature.text                   = 签名
DProviderInfo.Service.TerminalFactory.text             = 终端工厂
DProviderInfo.Service.TransformService.text            = 转换服务
DProviderInfo.Service.TrustManagerFactory.text         = 信任管理器工厂
DProviderInfo.Service.XMLSignatureFactory.text         = XML 签名工厂
DProviderInfo.ServicesNode.text                        = 服务
DProviderInfo.Title                                    = 安全提供程序信息
DProviderInfo.TopNode.text                             = 安全提供程序
DProviderInfo.jbCopy.mnemonic                          = C
DProviderInfo.jbCopy.text                              = 复制
DProviderInfo.jbCopy.tooltip                           = 将安全提供程序信息复制到剪贴板
DProviderInfo.jbOK.text                                = 确定

DUpgradeCryptoStrength.ManualInstructions.message        = <html><b>手动升级加密强度的说明</b><br><br>按 OK 退出 KeyStore Explorer 后，继续执行这些说明，以免锁定现有策略文件。<ol><li>打开 <b>无限强度管辖政策 ZIP</b> 并提取文件 <b>local_policy.jar</b> 和 <b>US_export_policy.jar</b>。</li><li>在计算机上找到 <b>Java 安全库</b> 文件夹：<b>{0}</b>。</li><li>备份现有的 <b>local_policy.jar</b> 和 <b>US_export_policy.jar</b> 文件，这些文件位于 <b>Java 安全库</b> 文件夹中。</li><li>将提取的 <b>local_policy.jar</b> 和 <b>US_export_policy.jar</b> 文件复制到 <b>Java 安全库</b> 文件夹中。</li><li>重新启动 KeyStore Explorer，以使上述步骤生效。</li></ol></html>
DUpgradeCryptoStrength.NoLaunchBrowser.message           = 无法启动网页浏览器。政策下载网页地址是 ''{0}''。
DUpgradeCryptoStrength.NoUpdatePolicy.message            = 无法自动升级加密强度。\n这可能是由于权限不足。\n现在将显示手动升级说明。
DUpgradeCryptoStrength.NotPolicyZip.message              = 提供的文件不是有效的无限强度管辖政策 ZIP。
DUpgradeCryptoStrength.Title                             = 升级加密强度
DUpgradeCryptoStrength.Title.ChoosePolicyZip.Title       = 选择无限强度管辖政策 ZIP
DUpgradeCryptoStrength.Title.PolicyZipChooser.button     = 选择
DUpgradeCryptoStrength.jbBrowsePolicy.mnemonic           = B
DUpgradeCryptoStrength.jbBrowsePolicy.text               = 浏览无限强度管辖政策 ZIP
DUpgradeCryptoStrength.jbCancel.text                     = 取消
DUpgradeCryptoStrength.jbDownloadPolicy.mnemonic         = D
DUpgradeCryptoStrength.jbDownloadPolicy.text             = 下载无限强度管辖政策 ZIP
DUpgradeCryptoStrength.jbUpgrade.mnemonic                = U
DUpgradeCryptoStrength.jbUpgrade.text                    = 升级
DUpgradeCryptoStrength.jlDownloadPolicyInstructions.text = <html><b>1. 下载无限强度管辖政策</b><br><br>按下面的按钮启动网页浏览器，并下载适用于您的 JRE 的<br>无限强度管辖政策 ZIP。</html>
DUpgradeCryptoStrength.jlDropPolicyInstructions.text     = <html><b>2. 安装无限强度管辖政策</b><br><br>浏览到无限强度管辖政策<br>ZIP，或将其拖放到右侧图标上。最后按<br>升级按钮。</html>
DUpgradeCryptoStrength.jlUpgradeInstructions.text        = <html>要将加密升级到无限强度，请执行以下步骤：</html>

DViewCertificateFingerprint.Title                        = {0} 证书指纹
DViewCertificateFingerprint.jbCopy.mnemonic              = C
DViewCertificateFingerprint.jbCopy.text                  = 复制
DViewCertificateFingerprint.jbCopy.tooltip               = 将证书指纹复制到剪贴板
DViewCertificateFingerprint.jbOK.text                    = 确定
DViewCertificateFingerprint.jtaFingerprint.tooltip       = {0} 证书指纹
DViewCertificateFingerprint.jtaFormatFingerprint.tooltip = {0} 证书格式化指纹
DViewCertificateFingerprint.jtaBase64Fingerprint.tooltip = {0} 证书 Base64 编码指纹
DViewCertificateFingerprint.jlFingerprint.text           = 指纹：
DViewCertificateFingerprint.jlFormatFingerprint.text     = 格式化指纹：
DViewCertificateFingerprint.jlBase64Fingerprint.text     = Base64 指纹：

DViewPublicKeyFingerprint.Title                        = {0} 指纹
DViewPublicKeyFingerprint.jbCopy.mnemonic              = C
DViewPublicKeyFingerprint.jbCopy.text                  = 复制
DViewPublicKeyFingerprint.jbCopy.tooltip               = 将公钥指纹复制到剪贴板
DViewPublicKeyFingerprint.jbOK.text                    = 确定
DViewPublicKeyFingerprint.jtaFingerprint.tooltip       = {0} 指纹
DViewPublicKeyFingerprint.jtaFormatFingerprint.tooltip = {0} 格式化指纹
DViewPublicKeyFingerprint.jtaBase64Fingerprint.tooltip = {0} Base64 编码指纹
DViewPublicKeyFingerprint.jlFingerprint.text           = 指纹：
DViewPublicKeyFingerprint.jlFormatFingerprint.text     = 格式化指纹：
DViewPublicKeyFingerprint.jlBase64Fingerprint.text     = Base64 指纹：

DViewJcePolicy.jbCopy.mnemonic   = C
DViewJcePolicy.jbCopy.text       = 复制
DViewJcePolicy.jbCopy.tooltip    = 将 JCE 策略复制到剪贴板
DViewJcePolicy.jbOK.text         = 确定
DViewJcePolicy.jtaPolicy.tooltip = JCE 策略定义

JCertificateFingerprint.jbViewCertificateFingerprint.tooltip = 查看完整的证书指纹
JCertificateFingerprint.jcbFingerprintAlg.tooltip            = 指纹算法
JCertificateFingerprint.jtfCertificateFingerprint.tooltip    = 证书指纹

JPublicKeyFingerprint.jbViewPublicKeyFingerprint.tooltip = 查看完整的公钥指纹
JPublicKeyFingerprint.jcbFingerprintAlg.tooltip          = 指纹算法：\n1. RFC 5280 SubjectKeyIdentifier (SKI) 方法 1\n2. RFC 5280 SubjectKeyIdentifier (SKI) 方法 2\n3. 针对 SubjectPublicKeyInfo (SPKI) ASN.1 结构计算的 SHA-1\n4. 针对 SubjectPublicKeyInfo (SPKI) ASN.1 结构计算的 SHA-256
JPublicKeyFingerprint.jtfPublicKeyFingerprint.tooltip    = 公钥指纹

JDistinguishedName.jbClearDistinguishedName.tooltip         = 清除名称
JDistinguishedName.jbViewEditDistinguishedName.Edit.tooltip = 编辑名称
JDistinguishedName.jbViewEditDistinguishedName.View.tooltip = 查看名称

JKeyIdentifier.jbClearKeyIdentifier.tooltip = 清除密钥标识符
JKeyIdentifier.jbEditKeyIdentifier.tooltip  = 编辑密钥标识符

JValidityPeriod.jbApply.text        = 应用
JValidityPeriod.jcbType.days.text   = 天
JValidityPeriod.jcbType.months.text = 月
JValidityPeriod.jcbType.weeks.text  = 周
JValidityPeriod.jcbType.years.text  = 年

ProviderTreeCellRend.Algorithm.tooltip      = 服务算法
ProviderTreeCellRend.AlgorithmClass.tooltip = 算法的实现 Java 类
ProviderTreeCellRend.Alias.tooltip          = 算法的别名
ProviderTreeCellRend.Aliases.tooltip        = 算法的别名
ProviderTreeCellRend.Attribute.tooltip      = 算法的属性
ProviderTreeCellRend.Attributes.tooltip     = 算法的属性
ProviderTreeCellRend.Description.tooltip    = 安全提供程序的描述
ProviderTreeCellRend.Provider.tooltip       = 安全提供程序 - 名称和版本
ProviderTreeCellRend.ProviderClass.tooltip  = 安全提供程序的实现 Java 类
ProviderTreeCellRend.Root.tooltip           = 已安装的安全提供程序（按优先顺序）
ProviderTreeCellRend.Service.tooltip        = 安全提供程序提供的服务
ProviderTreeCellRend.Services.tooltip       = 安全提供程序提供的服务
